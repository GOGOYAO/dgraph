#######################
# Input Schema
#######################

interface Desk {
	name: String! @id
	height: Int
}

type LaptopDesk implements Desk {
	name: String! @id
	height: Int
	width: Int
	Wooden: Boolean
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete:AuthRule) on OBJECT
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE
directive @cascade on FIELD

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddLaptopDeskPayload {
	laptopDesk(filter: LaptopDeskFilter, order: LaptopDeskOrder, first: Int, offset: Int): [LaptopDesk]
	numUids: Int
}

type DeleteDeskPayload {
	desk(filter: DeskFilter, order: DeskOrder, first: Int, offset: Int): [Desk]
	msg: String
	numUids: Int
}

type DeleteLaptopDeskPayload {
	laptopDesk(filter: LaptopDeskFilter, order: LaptopDeskOrder, first: Int, offset: Int): [LaptopDesk]
	msg: String
	numUids: Int
}

type UpdateDeskPayload {
	desk(filter: DeskFilter, order: DeskOrder, first: Int, offset: Int): [Desk]
	numUids: Int
}

type UpdateLaptopDeskPayload {
	laptopDesk(filter: LaptopDeskFilter, order: LaptopDeskOrder, first: Int, offset: Int): [LaptopDesk]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum DeskHasFilter {
	name
	height
}

enum DeskOrderable {
	name
	height
}

enum LaptopDeskHasFilter {
	name
	height
	width
	Wooden
}

enum LaptopDeskOrderable {
	name
	height
	width
}

#######################
# Generated Inputs
#######################

input AddLaptopDeskInput {
	name: String!
	height: Int
	width: Int
	Wooden: Boolean
}

input DeskFilter {
	name: StringHashFilter
	has: DeskHasFilter
	and: DeskFilter
	or: DeskFilter
	not: DeskFilter
}

input DeskOrder {
	asc: DeskOrderable
	desc: DeskOrderable
	then: DeskOrder
}

input DeskPatch {
	height: Int
}

input DeskRef {
	name: String! @id
}

input LaptopDeskFilter {
	name: StringHashFilter
	has: LaptopDeskHasFilter
	and: LaptopDeskFilter
	or: LaptopDeskFilter
	not: LaptopDeskFilter
}

input LaptopDeskOrder {
	asc: LaptopDeskOrderable
	desc: LaptopDeskOrderable
	then: LaptopDeskOrder
}

input LaptopDeskPatch {
	height: Int
	width: Int
	Wooden: Boolean
}

input LaptopDeskRef {
	name: String
	height: Int
	width: Int
	Wooden: Boolean
}

input UpdateDeskInput {
	filter: DeskFilter!
	set: DeskPatch
	remove: DeskPatch
}

input UpdateLaptopDeskInput {
	filter: LaptopDeskFilter!
	set: LaptopDeskPatch
	remove: LaptopDeskPatch
}

#######################
# Generated Query
#######################

type Query {
	getDesk(name: String!): Desk
	queryDesk(filter: DeskFilter, order: DeskOrder, first: Int, offset: Int): [Desk]
	getLaptopDesk(name: String!): LaptopDesk
	queryLaptopDesk(filter: LaptopDeskFilter, order: LaptopDeskOrder, first: Int, offset: Int): [LaptopDesk]
}

#######################
# Generated Mutations
#######################

type Mutation {
	updateDesk(input: UpdateDeskInput!): UpdateDeskPayload
	deleteDesk(filter: DeskFilter!): DeleteDeskPayload
	addLaptopDesk(input: [AddLaptopDeskInput!]!): AddLaptopDeskPayload
	updateLaptopDesk(input: UpdateLaptopDeskInput!): UpdateLaptopDeskPayload
	deleteLaptopDesk(filter: LaptopDeskFilter!): DeleteLaptopDeskPayload
}

